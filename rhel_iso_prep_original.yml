---
- hosts: bastion_host
  gather_facts: no
  ##  become: true

  tasks:

#Feature to add in the future, automatic downloading of the iso usging subscription pem file. Link to solution: https://access.redhat.com/solutions/4004591
#   - name: Download iso file using curl
#     get_url:
#       url: https://access.cdn.redhat.com/content/origin/files/sha256/1f/1f78e705cd1d8897a05afa060f77d81ed81ac141c2465d4763c0382aa96cadd0/rhel-8.5-x86_64-dvd.iso?user=46606641cfc6a3ae593c2684110d9148&_auth_=1639495117_de3cf35136de9756347e1b01dcc44fb4
#       dest:  "{{ org_iso }}" 
#     become: true 

   - name: Mount installation ISO read-only
     mount:
       path: "{{ mnt_dir }}"
       src:  "{{ org_iso }}"
       fstype: "iso9660"
       opts: loop,ro
       state: mounted
     become: true

   - name: Create a directory if it does not exist
     file:
       path: "{{ wrk_dir }}"
       state: directory
       
   - name: Copy Iso content to workingdir
     copy:
       src:  "{{ mnt_dir }}/"
       dest: "{{ wrk_dir }}/"
       remote_src: yes
     with_fileglob:
       - “{{ mnt_dir }}/*”
       - "{{ wrk_dir }}/*"
     become: true
     # needs to run as root otherwise all files will change ownership 

   - name: Unmount installation ISO 
     mount:
       path: "{{ mnt_dir }}"
       state: unmounted
     become: true

#let's first use a pre-created ks.cfg file, then we'll change this

#   - name: create custom kickstart file 
#     template:
#       src: "{{ ks_template }}"
#       dest: "{{ ks_dest }}"
#       owner: root
#       group: root
#     become: true

#   - name: add boot options
     # Replace before the expression till the begin of the file (requires >=2.4)
#     replace:
#       path: "{{ bootcfg_dest }}"
#       regexp: '^(kernelopt=.*)$'
       #replace: '\1 {{ bootoption }}'    # would add our options to the existing ones
#       replace: 'kernelopt={{ bootoption }}'    # adds our options instead of the existing ones
#     become: true

#   - name: add boot options II
     # Replace before the expression till the begin of the file (requires >=2.4)
#     replace:
#       path: "{{ bootcfg_dest2 }}"
#       regexp: '^(kernelopt=.*)$'
       #replace: '\1 {{ bootoption }}'    # would add our options to the existing ones
#       replace: 'kernelopt={{ bootoption }}'    # adds our options instead of the existing ones
#     become: true

   - name: "Edit isolinux.cfg file so testing media is NOT the default option"
     become: yes
     #become_user: root
     lineinfile:
       path: "{{ wrk_dir }}/isolinux/isolinux.cfg"
       # String to Search
       regexp: "menu default" 
       # State is set to Absent to remove if the Searching Line is found
       state: absent
      
   - name: "Create an entry in the boot menu (isolinux.cfg), which is the default option, allowing to boot using ks.cfg"
     become: yes
     blockinfile:
       path: "{{ wrk_dir }}/isolinux/isolinux.cfg"
       block: |
         label kickstart
           menu label ^Kickstart Installation of RHEL8.5
           menu default
           kernel vmlinuz
           append initrd=initrd.img inst.stage2=hd:LABEL=RHEL-8-5-0-BaseOS-x86_64 inst.ks=cdrom:/ks.cfg

   - name: "Delete the file grub.cfg"
     become: yes
     file:
       path: "{{ wrk_dir }}/EFI/BOOT/grub.cfg"
       state: absent

   - name: "Create the file grub.cfg (now it's a blank file)"
     become: yes
     file:
       path: "{{ wrk_dir }}/EFI/BOOT/grub.cfg"
       state: touch

   - name: "Fill the content of grub.cfg"
     become: yes
     blockinfile:
       path: "{{ wrk_dir }}/EFI/BOOT/grub.cfg"
       block: |
         ### BEGIN /etc/grub.d/10_linux ###
         menuentry 'Install Red Hat Enterprise Linux 8.5' --class fedora --class gnu-linux --class gnu --class os {
         linuxefi /images/pxeboot/vmlinuz inst.stage2=hd:LABEL=RHEL-8-5-0-BaseOS-x86_64 inst.ks=cdrom:/ks.cfg
         initrdefi /images/pxeboot/initrd.img
         }

   - name: assure destination directory to be in place
     file: 
       path: "{{ bastion_iso_dir }}"
       state: directory
       modification_time: preserve
       access_time: preserve
     become: true


   - name: "Create customized RHEL 8.5 iso image"
#as the command under the shell module has the " symbol we need to use ' to limit the whole command, otherwise it'll pop up an eror message
     shell: 'mkisofs -o {{ cust_iso }} -b isolinux/isolinux.bin -J -R -l -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot --joliet-long -graft-points -V "RHEL-8-5-0-BaseOS-x86_64" {{ wrk_dir }}'
     become: true

   - name: "Add an MBR in case we want to use this iso to boot from a disk storage device"
     shell: "isohybrid --uefi {{ cust_iso }}"
     become: true

   - name: "Implant md5 to iso in case it needs to be tested on boot"
     shell: "implantisomd5 {{ cust_iso }}"
     become: true


# not needed as we create the iso right into the bastion_iso_dir
#   - name: put customized iso image in place
#     copy: 
#       src: "{{ cust_iso }}"
#       dest: "{{ bastion_iso_dir }}"
#       remote_src: yes
#       owner: root
#       group: root
#       mode: '0644'

